
[{"content":"","date":"9 Juni 2024","externalUrl":null,"permalink":"/tags/algoritma/","section":"Tags","summary":"","title":"Algoritma","type":"tags"},{"content":"","date":"9 Juni 2024","externalUrl":null,"permalink":"/series/coding-interview/","section":"Series","summary":"","title":"Coding Interview","type":"series"},{"content":"Kuasai 26 pola pemecahan masalah untuk memecahkan wawancara coding apa pun.\n","date":"9 Juni 2024","externalUrl":null,"permalink":"/coding-interview/","section":"Ilmu Komputer","summary":"Kuasai 26 pola pemecahan masalah untuk memecahkan wawancara coding apa pun.","title":"Ilmu Komputer","type":"coding-interview"},{"content":" Bukan seorang ahli, hanya saja baru terajari\n","date":"9 Juni 2024","externalUrl":null,"permalink":"/","section":"Selamat Datang di Terajari!","summary":"Bukan seorang ahli, hanya saja baru terajari","title":"Selamat Datang di Terajari!","type":"page"},{"content":"","date":"9 Juni 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"9 Juni 2024","externalUrl":null,"permalink":"/tags/struktur-data/","section":"Tags","summary":"","title":"Struktur Data","type":"tags"},{"content":"","date":"9 Juni 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Ikhtisar # Sesuai namanya, teknik Two Pointers menggunakan dua pointer untuk menelusuri array atau daftar sampai kondisi tertentu terpenuhi. Ini berguna karena memungkinkan kita untuk melacak dua indeks yang berbeda dalam satu iterasi. Jadi, kalau kamu perlu menemukan dua elemen dalam array yang memenuhi kondisi tertentu, teknik dua pointer ini harus jadi strategi pertama yang kamu pikirkan.\nPointer bisa digunakan untuk menelusuri struktur data ke satu atau kedua arah, tergantung masalahnya. Misalnya, untuk mengecek apakah sebuah string adalah palindrom, kita bisa pakai satu pointer untuk mulai dari awal string dan satu lagi dari akhir string. Setiap langkah, kita bisa bandingkan nilai kedua pointer dan lihat apakah mereka memenuhi sifat palindrom.\nPendekatan yang simpel untuk menyelesaikan masalah ini adalah dengan menggunakan nested loop, dengan kompleksitas waktu \\( O(n^2) \\). Tapi, dengan menggunakan dua pointer yang bergerak ke arah tengah dari kedua ujung, kita bisa memanfaatkan properti simetri dari string palindrom. Ini memungkinkan kita membandingkan elemen-elemen dalam satu iterasi, membuat algoritma lebih efisien dengan kompleksitas waktu \\( O(n) \\).\nBerikut cara pointer bergerak sepanjang string:\n\u0026gt; a b c c b a ^ ^ \u0026gt; a b c c b a ^ ^ \u0026gt; a b c c b a ^ ^ Jadi, konsep two pointers sebenarnya adalah menerapkan strategi potongan dan pencarian. Tiap langkahnya, kita bisa dengan aman memangkas—artinya, menghilangkan—beberapa opsi solusi.\nApakah masalah saya cocok dengan strategi ini? # Ya, jika kondisinya seperti ini:\ndatanya linier, seperti array, list, linked-list, atau string fokus pada sebagian elemen data. Contoh implementasi # Banyak situasi di dunia nyata menggunakan pola two pointers. Ini beberapa contohnya:\nManajemen Memori: Dalam alokasi dan dealokasi memori, two pointers penting digunakan. Blok memori yang tersedia diwakili oleh penunjuk awal dan akhir. Ketika memori dialokasikan, penunjuk awal digeser ke depan menunjuk ke blok yang baru dialokasikan. Sebaliknya, saat memori dibebaskan, penunjuk awal digeser ke belakang menandai area yang telah didealokasi sebagai tersedia untuk alokasi di masa mendatang.\nSaran Produk: Di dunia belanja online, ketika pelanggan melihat keranjang mereka dan total belanja belum mencapai batas untuk pengiriman gratis, kita bisa menyarankan pasangan produk yang jika ditambahkan ke keranjang akan membuat total belanja mencapai syarat untuk pengiriman gratis. two pointers bisa digunakan untuk menyarankan pasangan produk yang dapat memenuhi syarat tersebut.\n","date":"9 Juni 2024","externalUrl":null,"permalink":"/coding-interview/two-pointers-intro/","section":"Ilmu Komputer","summary":"Ikhtisar # Sesuai namanya, teknik Two Pointers menggunakan dua pointer untuk menelusuri array atau daftar sampai kondisi tertentu terpenuhi.","title":"Two Pointers","type":"coding-interview"},{"content":"","date":"8 Juni 2024","externalUrl":null,"permalink":"/series/ilmu-komputer/","section":"Series","summary":"","title":"Ilmu Komputer","type":"series"},{"content":"","date":"8 Juni 2024","externalUrl":null,"permalink":"/ilmu-komputer/","section":"Ilmu Komputer","summary":"","title":"Ilmu Komputer","type":"ilmu-komputer"},{"content":"","date":"8 Juni 2024","externalUrl":null,"permalink":"/tags/logika/","section":"Tags","summary":"","title":"Logika","type":"tags"},{"content":" G. Pólya, seorang ahli matematika, memperkenalkan seni pemecahan masalah dengan membagi masalah menjadi beberapa langkah. Di sini saya baru saja terajari bagaimana memecahkan masalah menggunakan metode 4 langkah G. Pólya.\nLangkah 1: Pahami masalahnya # Sebelum melangkah lebih jauh untuk menemukan solusi yang mungkin kita gunakan, kita harus memahami masalahnya. Hal ini termasuk merenungkan jawaban dari pertanyaan berikut:\nApa kita sudah mengerti semua kata yang digunakan untuk mendeskripsikan masalah tersebut?\nApa kita sudah memahami apa yang ditanyakan?\nDapatkah kita menjabarkan masalah dan pertanyaannya dengan gaya bahasa kita?\nDapatkah kita memvisualisasikan dalam bentuk gambar atau diagram guna membantu kita memahami masalah tersebut?\nApa kita sudah cukup memiliki informasi untuk mencari jawaban atas masalah tersebut?\nLangkah 2: Menyusun rencana # Selanjutnya kita perlu memikirkan rencana terbaik untuk memecahkan masalah tersebut. Ada beberapa strategi yang bisa dipertimbangkan:\nPendekatan Bottom-Up # Dimulai dari elemen atau komponen kecil atau spesifik, dan secara bertahap digabungkan untuk membentuk sistem yang lebih kompleks.\nPendekatan Top-Down # Dimulai dari gambaran besar, kemudian secara bertahap dibagi menjadi bagian-bagian kecil dan mendetail.\nDivide and Conqueror # Memecah masalah menjadi sub-masalah yang lebih kecil dan mudah dikelola, dan setiap sub-masalah dipecahkan secara independen, kemudian setiap solusinya digabungkan menjadi solusi keseluruhan dari masalah asli.\nPenyempurnaan Bertahap # Membagi sebuah masalah menjadi semacam langkah-langkah yang mudah dikelola. Selesaikan setiap langkahnya sampai kita menyelesaikan masalah secara keseluruhan.\nAnalogi # Membandingkan masalah saat ini dengan masalah yang pernah dipecahkan sebelumnya yang memiliki kesamaan yang penting. Terapkan strategi yang sama dengan pemecahan masalah sebelumnya.\nPencocokan Pola # Amati pola masalah. Gunakan hasil pengamatan tersebut untuk membangun solusi berdasarkan pola yang sudah dikenal.\nLangkah 3: Melaksanakan Rencana # Setelah memilih strategi pemecahan masalah yang mana, selanjutnya kita perlu menjalankan rencana tersebut. Ada beberapa poin penting yang perlu kita pertimbangkan:\nMelaksanakan rencana dengan hati-hati dan sabar.\nMemeriksa setiap langkah saat sedang dilakukan.\nDapat memastikan bahwa langkah yang kita gunakan sudah benar.\nSelama berhasil, bertahan dengan rencana yang kita pilih, tapi jika tidak berhasil, maka buatlah rencana lain.\nLangkah 4: Melihat ke Belakang # Setelah melaksanakan rencana, kita perlu melihat masalahnya dan meninjau solusi yang kita temukan. Untuk memutuskan bahwa ini solusi yang tepat, kita perlu mengkonfirmasi dengan menjawab pertanyaan berikut:\nDapatkah kita memeriksa hasilnya?\nApakah ada cara lain?\nApakah hasil atau metodenya dapat digunakan untuk masalah lain?\nMerefleksikan keberhasilan dan kegagalan masa lalu dapat membuat kita memprediksi strategi yang mungkin bekerja di lain waktu.\n","date":"8 Juni 2024","externalUrl":null,"permalink":"/ilmu-komputer/polya/","section":"Ilmu Komputer","summary":"G.","title":"Pemecahan Masalah Ala Pólya","type":"ilmu-komputer"},{"content":" Teka-teki # Setelah AI berkembang pesat di tahun 2050, seluruh dunia memiliki ketergantungan berlebih pada robot. Manusia telah berhenti menggunakan pikirannya sendiri, sedangkan robot-robot mengembangkan pikiran mereka. Pada satu waktu, seorang profesor tua menggunakan teka-teki untuk mendapatkan teman baru. Berkat sosial media, cukup mudah untuk menemukan keberadaan sang profesor. Ini adalah kesempatan saya, barangkali dengan berteman dengannya, saya akan terajari hal baru.\nSaya telah berada di kedai kopi tempat profesor biasa menghabiskan waktu. Saya begitu bersemangat karena akhirnya saya benar-benar bisa berteman dengan manusia sungguhan. Namun, sebelum profesor mengizinkan saya duduk, dia memberikan saya secarik kertas, dan bertanya apakah menurut saya argumen yang tertulis pada kertas tersebut logis dan benar.\nSemua robot takut dengan hantu\nDoramenyon adalah robot\nMaka, Doramenyon takut dengan hantu\nJawaban Pertama # Saya terkekeh setelah membacanya. Dengan penuh percaya diri, saya katakan kepadanya bahwa argumen pada kertas ini adalah argumen konyol yang tidak logis. Maksud saya, bagaimana mungkin sebuah robot takut dengan hantu?\nSayangnya jawaban saya salah.\n\u0026ldquo;Seringkali pengalaman hidup dan keyakinan kita tidak benar-benar logis. Hanya karena kamu percaya bahwa robot tidak takut dengan hantu, kamu berpikir bahwa argumen pada kertas ini tidak valid.\u0026rdquo; Setelah mengatakannya, profesor mengambil sebuah buku dan memberikannya pada saya. Lalu dia pergi meninggalkan kedai kopi.\nDengan rasa penasaran yang aneh, saya membuka halaman pertama buku ini, dan menemukan argumen ikonik dari Socrates.\nSemua manusia tidak kekal\nSocrates adalah manusia\nOleh karena itu, Socrates tidak kekal\nMenyelami Lebih Dalam # Meskipun tidak terbatas cara untuk bernalar dalam bahasa manusia, nyatanya beberapa filsuf di masa lalu mendedikasikan hidup mereka untuk mempelajari bentuk-bentuk penalaran yang sahih dan tidak sahih. Dan ternyata hanya ada segelintir bentuk yang sahih. Pertanyaannya, apa sih yang dimaksud bentuk penalaran?\nSemua manusia tidak kekal\nSocrates adalah manusia\nOleh karena itu, Socrates tidak kekal\nSemua [X] tidak kekal\nSocrates adalah [X]\nOleh karena itu, Socrates tidak kekal\nSebuah bentuk penalaran dapat disebut sebagai template jika segala sesuatu yang spesifik yang dapat diabaikan untuk sementara waktu akan diabstraksikan. Dalam logika, bentuk sebuah argumen mengacu pada struktur logisnya, yang disarikan dari konten atau makna spesifik dari makna yang terlibat. Bentuk ini seperti kerangka argumen yang tetap konsisten meski kita mengganti detail kontennya.\nPada kutipan di atas, saya mengganti kata \u0026ldquo;manusia\u0026rdquo; menjadi simbol lain. Ini bisa dianggap sebagai penampung, dalam hal ini saya menggantinya dengan [X]. Bagi seorang ahli logika, apa yang ditempatkan pada penampung [X] tidak menjadi masalah. Dalam hal argumen logika, bentuk adalah sebuah struktur di mana tidak penting istilah tertentu yang kita gunakan; yang penting adalah pengaturan yang konsisten dari istilah-istilah tersebut relatif satu sama lain. Premisnya adalah, jika kita berhasil menempatkan istilah pada penampung yang tepat, maka argumen tersebut benar.\nSemua [X] adalah [Y]\n[Z] adalah [X]\nOleh karena itu, [Z] adalah [Y]\n","date":"8 Juni 2024","externalUrl":null,"permalink":"/ilmu-komputer/logika/","section":"Ilmu Komputer","summary":"Teka-teki # Setelah AI berkembang pesat di tahun 2050, seluruh dunia memiliki ketergantungan berlebih pada robot.","title":"Sebuah Negeri Bernama Logika","type":"ilmu-komputer"},{"content":"","date":"8 Juni 2024","externalUrl":null,"permalink":"/tags/umum/","section":"Tags","summary":"","title":"Umum","type":"tags"},{"content":"","date":"1 Januari 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 Januari 0001","externalUrl":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog","type":"blog"},{"content":"","date":"1 Januari 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 Januari 0001","externalUrl":null,"permalink":"/ilmu-komputers/","section":"Ilmu Komputers","summary":"","title":"Ilmu Komputers","type":"ilmu-komputers"},{"content":"","date":"1 Januari 0001","externalUrl":null,"permalink":"/pemrogramen/","section":"Pemrogramen","summary":"","title":"Pemrogramen","type":"pemrogramen"}]